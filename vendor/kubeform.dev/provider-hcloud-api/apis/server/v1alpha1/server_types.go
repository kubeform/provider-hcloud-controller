/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by Kubeform. DO NOT EDIT.

package v1alpha1

import (
	base "kubeform.dev/apimachinery/api/v1alpha1"

	core "k8s.io/api/core/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	kmapi "kmodules.xyz/client-go/api/v1"
	"sigs.k8s.io/cli-utils/pkg/kstatus/status"
)

// +genclient
// +k8s:openapi-gen=true
// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:printcolumn:name="Phase",type=string,JSONPath=`.status.phase`

type Server struct {
	metav1.TypeMeta   `json:",inline,omitempty"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              ServerSpec   `json:"spec,omitempty"`
	Status            ServerStatus `json:"status,omitempty"`
}

type ServerSpecNetwork struct {
	// +optional
	AliasIPS []string `json:"aliasIPS,omitempty" tf:"alias_ips"`
	// +optional
	Ip *string `json:"ip,omitempty" tf:"ip"`
	// +optional
	MacAddress *string `json:"macAddress,omitempty" tf:"mac_address"`
	NetworkID  *int64  `json:"networkID" tf:"network_id"`
}

type ServerSpec struct {
	State *ServerSpecResource `json:"state,omitempty" tf:"-"`

	Resource ServerSpecResource `json:"resource" tf:"resource"`

	UpdatePolicy base.UpdatePolicy `json:"updatePolicy,omitempty" tf:"-"`

	TerminationPolicy base.TerminationPolicy `json:"terminationPolicy,omitempty" tf:"-"`

	ProviderRef core.LocalObjectReference `json:"providerRef" tf:"-"`

	BackendRef *core.LocalObjectReference `json:"backendRef,omitempty" tf:"-"`
}

type ServerSpecResource struct {
	Timeouts *base.ResourceTimeout `json:"timeouts,omitempty" tf:"timeouts"`

	ID string `json:"id,omitempty" tf:"id,omitempty"`

	// +optional
	// Deprecated
	BackupWindow *string `json:"backupWindow,omitempty" tf:"backup_window"`
	// +optional
	Backups *bool `json:"backups,omitempty" tf:"backups"`
	// +optional
	Datacenter *string `json:"datacenter,omitempty" tf:"datacenter"`
	// +optional
	FirewallIDS []int64 `json:"firewallIDS,omitempty" tf:"firewall_ids"`
	Image       *string `json:"image" tf:"image"`
	// +optional
	Ipv4Address *string `json:"ipv4Address,omitempty" tf:"ipv4_address"`
	// +optional
	Ipv6Address *string `json:"ipv6Address,omitempty" tf:"ipv6_address"`
	// +optional
	Ipv6Network *string `json:"ipv6Network,omitempty" tf:"ipv6_network"`
	// +optional
	Iso *string `json:"iso,omitempty" tf:"iso"`
	// +optional
	KeepDisk *bool `json:"keepDisk,omitempty" tf:"keep_disk"`
	// +optional
	Labels map[string]string `json:"labels,omitempty" tf:"labels"`
	// +optional
	Location *string `json:"location,omitempty" tf:"location"`
	Name     *string `json:"name" tf:"name"`
	// +optional
	Network []ServerSpecNetwork `json:"network,omitempty" tf:"network"`
	// +optional
	Rescue     *string `json:"rescue,omitempty" tf:"rescue"`
	ServerType *string `json:"serverType" tf:"server_type"`
	// +optional
	SshKeys []string `json:"sshKeys,omitempty" tf:"ssh_keys"`
	// +optional
	Status *string `json:"status,omitempty" tf:"status"`
	// +optional
	UserData *string `json:"userData,omitempty" tf:"user_data"`
}

type ServerStatus struct {
	// Resource generation, which is updated on mutation by the API Server.
	// +optional
	ObservedGeneration int64 `json:"observedGeneration,omitempty"`
	// +optional
	Phase status.Status `json:"phase,omitempty"`
	// +optional
	Conditions []kmapi.Condition `json:"conditions,omitempty"`
}

// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +kubebuilder:object:root=true

// ServerList is a list of Servers
type ServerList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	// Items is a list of Server CRD objects
	Items []Server `json:"items,omitempty"`
}
