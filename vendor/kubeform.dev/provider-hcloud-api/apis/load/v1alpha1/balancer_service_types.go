/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by Kubeform. DO NOT EDIT.

package v1alpha1

import (
	base "kubeform.dev/apimachinery/api/v1alpha1"

	core "k8s.io/api/core/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	kmapi "kmodules.xyz/client-go/api/v1"
	"sigs.k8s.io/cli-utils/pkg/kstatus/status"
)

// +genclient
// +k8s:openapi-gen=true
// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:printcolumn:name="Phase",type=string,JSONPath=`.status.phase`

type BalancerService struct {
	metav1.TypeMeta   `json:",inline,omitempty"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              BalancerServiceSpec   `json:"spec,omitempty"`
	Status            BalancerServiceStatus `json:"status,omitempty"`
}

type BalancerServiceSpecHealthCheckHttp struct {
	// +optional
	Domain *string `json:"domain,omitempty" tf:"domain"`
	// +optional
	Path *string `json:"path,omitempty" tf:"path"`
	// +optional
	Response *string `json:"response,omitempty" tf:"response"`
	// +optional
	StatusCodes []string `json:"statusCodes,omitempty" tf:"status_codes"`
	// +optional
	Tls *bool `json:"tls,omitempty" tf:"tls"`
}

type BalancerServiceSpecHealthCheck struct {
	// +optional
	Http     *BalancerServiceSpecHealthCheckHttp `json:"http,omitempty" tf:"http"`
	Interval *int64                              `json:"interval" tf:"interval"`
	Port     *int64                              `json:"port" tf:"port"`
	Protocol *string                             `json:"protocol" tf:"protocol"`
	// +optional
	Retries *int64 `json:"retries,omitempty" tf:"retries"`
	Timeout *int64 `json:"timeout" tf:"timeout"`
}

type BalancerServiceSpecHttp struct {
	// +optional
	Certificates []int64 `json:"certificates,omitempty" tf:"certificates"`
	// +optional
	CookieLifetime *int64 `json:"cookieLifetime,omitempty" tf:"cookie_lifetime"`
	// +optional
	CookieName *string `json:"cookieName,omitempty" tf:"cookie_name"`
	// +optional
	RedirectHTTP *bool `json:"redirectHTTP,omitempty" tf:"redirect_http"`
	// +optional
	StickySessions *bool `json:"stickySessions,omitempty" tf:"sticky_sessions"`
}

type BalancerServiceSpec struct {
	State *BalancerServiceSpecResource `json:"state,omitempty" tf:"-"`

	Resource BalancerServiceSpecResource `json:"resource" tf:"resource"`

	UpdatePolicy base.UpdatePolicy `json:"updatePolicy,omitempty" tf:"-"`

	TerminationPolicy base.TerminationPolicy `json:"terminationPolicy,omitempty" tf:"-"`

	ProviderRef core.LocalObjectReference `json:"providerRef" tf:"-"`

	BackendRef *core.LocalObjectReference `json:"backendRef,omitempty" tf:"-"`
}

type BalancerServiceSpecResource struct {
	ID string `json:"id,omitempty" tf:"id,omitempty"`

	// +optional
	DestinationPort *int64 `json:"destinationPort,omitempty" tf:"destination_port"`
	// +optional
	HealthCheck *BalancerServiceSpecHealthCheck `json:"healthCheck,omitempty" tf:"health_check"`
	// +optional
	Http *BalancerServiceSpecHttp `json:"http,omitempty" tf:"http"`
	// +optional
	ListenPort     *int64  `json:"listenPort,omitempty" tf:"listen_port"`
	LoadBalancerID *string `json:"loadBalancerID" tf:"load_balancer_id"`
	Protocol       *string `json:"protocol" tf:"protocol"`
	// +optional
	Proxyprotocol *bool `json:"proxyprotocol,omitempty" tf:"proxyprotocol"`
}

type BalancerServiceStatus struct {
	// Resource generation, which is updated on mutation by the API Server.
	// +optional
	ObservedGeneration int64 `json:"observedGeneration,omitempty"`
	// +optional
	Phase status.Status `json:"phase,omitempty"`
	// +optional
	Conditions []kmapi.Condition `json:"conditions,omitempty"`
}

// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +kubebuilder:object:root=true

// BalancerServiceList is a list of BalancerServices
type BalancerServiceList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	// Items is a list of BalancerService CRD objects
	Items []BalancerService `json:"items,omitempty"`
}
